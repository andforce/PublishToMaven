apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

apply from: 'jcenter-javadoc.gradle'

class JcenterConfig {
    String bintrayRepo = ''            //  你上传的位于bintray中的Repository名称
    String publishedGroupId = ''       //  填写groupId， 一般是包名，比如：com.android.support
    String libName = ''                //  如果不填写，就使用module名称
    String versionName = ''            //  版本号，比如：22.2.1
    String vcsUrl = ''                 //  可以填写github上库的地址.
    String licenseName = ''            //  支持的协议请看

    // 下面这些都是选填字段
    String libraryPackaging = ''       //  如果是'com.android.library'默认上传aar, 如果是'java-library'默认上传jar
    String libraryDesc = ''            //  库的描述
    String websiteUrl = ''             //  可以填写github上的库地址.
    String issueTrackerUrl = ''        //  可以填写github库的issue地址.
    String libraryVersionDesc = ''     //  版本描述


    String getBintrayRepo() {
        return bintrayRepo
    }

    void setBintrayRepo(String bintrayRepo) {
        this.bintrayRepo = bintrayRepo
    }

    String getPublishedGroupId() {
        return publishedGroupId
    }

    void setPublishedGroupId(String publishedGroupId) {
        this.publishedGroupId = publishedGroupId
    }

    String getLibName() {
        return libName
    }

    void setLibName(String libName) {
        this.libName = libName
    }

    String getVersionName() {
        return versionName
    }

    void setVersionName(String versionName) {
        this.versionName = versionName
    }

    String getVcsUrl() {
        return vcsUrl
    }

    void setVcsUrl(String vcsUrl) {
        this.vcsUrl = vcsUrl
    }

    String getLicenseName() {
        return licenseName
    }

    void setLicenseName(String licenseName) {
        this.licenseName = licenseName
    }

    String getLibraryPackaging() {
        return libraryPackaging
    }

    void setLibraryPackaging(String libraryPackaging) {
        this.libraryPackaging = libraryPackaging
    }

    String getLibraryDesc() {
        return libraryDesc
    }

    void setLibraryDesc(String libraryDesc) {
        this.libraryDesc = libraryDesc
    }

    String getWebsiteUrl() {
        return websiteUrl
    }

    void setWebsiteUrl(String websiteUrl) {
        this.websiteUrl = websiteUrl
    }

    String getIssueTrackerUrl() {
        return issueTrackerUrl
    }

    void setIssueTrackerUrl(String issueTrackerUrl) {
        this.issueTrackerUrl = issueTrackerUrl
    }

    String getLibraryVersionDesc() {
        return libraryVersionDesc
    }

    void setLibraryVersionDesc(String libraryVersionDesc) {
        this.libraryVersionDesc = libraryVersionDesc
    }
}

project.extensions.create('jcenterConfig', JcenterConfig)

static boolean isEmptyString(String str) {
    if (str == null || str.length() == 0) {
        return true
    }
    return false
}

project.afterEvaluate {

    JcenterConfig jcenterConfig = (JcenterConfig) project.extensions.getByName("jcenterConfig")

    group = jcenterConfig.publishedGroupId
    version = jcenterConfig.versionName

    install {
        repositories.mavenInstaller {
            // This generates POM.xml with proper parameters
            pom {
                project {
                    packaging !isEmptyString(jcenterConfig.libraryPackaging) ? jcenterConfig.libraryPackaging : project.hasProperty("android") ? 'aar' : 'jar'
                    groupId jcenterConfig.publishedGroupId
                    artifactId jcenterConfig.artifactId

                    name !isEmptyString(jcenterConfig.libName) ? jcenterConfig.libName : project.name

                    if (!isEmptyString(jcenterConfig.libraryDesc)) {
                        description jcenterConfig.libraryDesc
                    }

                    if (!isEmptyString(jcenterConfig.websiteUrl)) {
                        url jcenterConfig.websiteUrl
                    }

                    if (!isEmptyString(jcenterConfig.licenseName)) {
                        // Set your license
                        licenses {
                            license {
                                name jcenterConfig.licenseName
                            }
                        }
                    }

                    scm {
                        if (!isEmptyString(jcenterConfig.websiteUrl)) {
                            connection jcenterConfig.websiteUrl
                            developerConnection jcenterConfig.websiteUrl
                            url jcenterConfig.websiteUrl
                        }
                    }
                }
            }
        }
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    bintray {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")
        configurations = ['archives']

        pkg {
            repo = jcenterConfig.bintrayRepo        //发布到Bintray的maven库

            name = !isEmptyString(jcenterConfig.libName) ? jcenterConfig.libName : project.name

            if (!isEmptyString(jcenterConfig.libraryDesc)){
                desc = jcenterConfig.libraryDesc
            }
            override = true
            publish = true
            publicDownloadNumbers = true
            if (!isEmptyString(jcenterConfig.websiteUrl)){
                websiteUrl = jcenterConfig.websiteUrl
            }

            if (!isEmptyString(jcenterConfig.issueTrackerUrl)){
                issueTrackerUrl = jcenterConfig.issueTrackerUrl
            }

            if (!isEmptyString(jcenterConfig.vcsUrl)){
                vcsUrl = jcenterConfig.vcsUrl
            }

            if (!isEmptyString(jcenterConfig.licenseName)){
                licenses = [jcenterConfig.licenseName]
            }
            publish = true
            //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
            version {
                if (!isEmptyString(jcenterConfig.libraryVersionDesc)){
                    desc = jcenterConfig.libraryVersionDesc
                }
                released = new Date()
                gpg {
                    sign = true //Determines whether to GPG sign the files. The default is false
                    passphrase = properties.getProperty("bintray.gpg.password")
                    //Optional. The passphrase for GPG signing'
                }
            }
        }
    }
}

task jcenter {
    doLast {
        println "Release ${version}"
    }
}

jcenter.dependsOn(install)
jcenter.dependsOn(bintrayUpload)
