apply plugin: 'maven'
apply plugin: "maven-publish"

class PublishConfig {
    String artifactId
    String version
    String groupId
    String description
    boolean localDebug = false

    String getArtifactId() {
        return artifactId
    }

    void setArtifactId(String artifactId) {
        this.artifactId = artifactId
    }

    String getVersion() {
        return version
    }

    void setVersion(String version) {
        this.version = version
    }

    String getGroupId() {
        return groupId
    }

    void setGroupId(String groupId) {
        this.groupId = groupId
    }

    String getDescription() {
        return description
    }

    void setDescription(String description) {
        this.description = description
    }

    boolean getLocalDebug() {
        return localDebug
    }

    void setLocalDebug(boolean localDebug) {
        this.localDebug = localDebug
    }

    @Override
    String toString() {
        return this.groupId + ":" + this.artifactId + ":" + this.version
    }
}

project.extensions.create('publishConfig', PublishConfig)

project.afterEvaluate {
    println("----->> afterEvaluate: " + project.getProperties())

    if (project.hasProperty("android")) {
        // Android libraries

        println("----->> java doc for android lib, Java Version:" + JavaVersion.current().getMajorVersion())

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.srcDirs
        }
        android.libraryVariants.all { variant ->
            //println variant.javaCompile.classpath.files

            if (variant.name == 'release') {
                //我们只需 release 的 javadoc

                task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {

                    title "API Documentation (${project.android.defaultConfig.versionName})"
                    group "ApiDoc"
                    description "Generates Javadoc for $variant.name."

                    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
                    source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i }

                    doFirst {
                        classpath = project.files(variant.javaCompileProvider.get().classpath.files, project.android.getBootClasspath())
                    }

                    options {
                        encoding "utf-8"
                    }

                    String javaDocsLink = String.format("https://docs.oracle.com/%sjava/javase/%s/docs/api/",
                            (Integer.valueOf(JavaVersion.current().getMajorVersion()) <= 10) ? "" : "en/", JavaVersion.current())
                    options.links(javaDocsLink)

                    if (JavaVersion.current().isJava8Compatible()) {
                        options.addStringOption('Xdoclint:none', '-quiet')
                    }

                    exclude '**/BuildConfig.java'
                    exclude '**/R.java'
                }
                task("javadoc${variant.name.capitalize()}Jar", type: Jar,
                        dependsOn: "generate${variant.name.capitalize()}Javadoc") {
                    from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
                    classifier = 'javadoc'
                }
                artifacts {
                    archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
                    archives sourcesJar
                }
            }
        }
    } else {
        println("----->> java doc for java lib")
        // Java libraries
        task sourcesJar(type: Jar, dependsOn: classes) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }
        task javadocJar(type: Jar, dependsOn: javadoc) {
            from javadoc.destinationDir
            classifier = 'javadoc'
        }

        artifacts {
            archives javadocJar
            archives sourcesJar
        }
    }

    PublishConfig publishConfig = (PublishConfig) project.extensions.getByName("publishConfig")
    println("----->> publishConfig: " + (publishConfig == null) + publishConfig.toString())
    uploadArchives {
        configuration = configurations.archives
        repositories {
            mavenDeployer {

                println("----->> mavenDeployer " + (publishConfig == null) + publishConfig.toString())

                if (publishConfig.localDebug) {
                    snapshotRepository(url: "file://$buildDir/repo-snapshot")
                    repository(url: "file://$buildDir/repo")
                } else {
                    snapshotRepository(url: "http://your.maven.url/") {
                        authentication(userName: 'your.name', password: 'your.pwd')
                    }
                    repository(url: "http://http://your.maven.url//") {
                        authentication(userName: 'your.name', password: 'your.pwd')
                    }
                }
                pom.project {
                    artifactId publishConfig.artifactId
                    version publishConfig.version
                    groupId publishConfig.groupId
                    packaging project.hasProperty("android") ? "aar" : "jar"
                    description publishConfig.description
                }
            }
        }
    }
}
